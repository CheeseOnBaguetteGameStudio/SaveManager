# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  sem-version:
    name: SemVersion
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Sem-Version
      id: sem-version
      uses: shiipou/sem-version@stable
      with:
        allow-failure: false
        prerelease-branches: '^(rc|beta|nightly|hotfix)$'

    outputs:
      WILL_RELEASE: ${{ steps.sem-version.outputs.WILL_RELEASE }}
      IS_PRE_RELEASE: ${{ steps.sem-version.outputs.IS_PRE_RELEASE }}
      VERSION: ${{ steps.sem-version.outputs.VERSION }}
      CHANGELOG: ${{ steps.sem-version.outputs.CHANGELOG }}

  build:
    name: Build
    needs: [ sem-version ]
    runs-on: ubuntu-latest
    if: ${{ needs.sem-version.outputs.WILL_RELEASE == 'true' }}

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test with dotnet
      run: dotnet test --no-restore --logger trx --results-directory "TestResults-${{ matrix.dotnet-version }}"
    - name: Upload dotnet test results
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-results-${{ matrix.dotnet-version }}
        path: TestResults-${{ matrix.dotnet-version }}
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
  release:
      name: Release
      needs: [ build, sem-version ]
      runs-on: ubuntu-latest
      if: ${{ needs.sem-version.outputs.WILL_RELEASE == 'true' }}
      environment: ${{ github.ref_name }}
      permissions:
        contents: write
      timeout-minutes: 2
      steps:
      - name: download-artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: needs.sem-version.outputs.WILL_RELEASE == 'true'
        run: |
          changelog_file=$(mktemp)
          echo "${{ needs.sem-version.outputs.CHANGELOG }}" >> "$changelog_file"
  
          ARGS="--repo ${{ github.repository }} --target ${{ github.sha }} -F $changelog_file"
          if [[ "${{ needs.sem-version.outputs.IS_PRE_RELEASE }}" ==  "true" ]]; then
            ARGS="$ARGS --prerelease"
          fi
          gh release create $ARGS v${{ needs.sem-version.outputs.VERSION }} ./artifacts/*/*
